name: CI/CD Pipeline (develop only)

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      IMAGE_NAME: zerojae175/easy-schedule
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push development image
        run: |
          echo "Building development image..."
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from=type=registry,ref=${IMAGE_NAME}:cache \
            --cache-to=type=registry,ref=${IMAGE_NAME}:cache,mode=max \
            -f Dockerfile \
            -t ${IMAGE_NAME}:dev_${IMAGE_TAG} \
            --push .

  deploy:
    runs-on: ubuntu-24.04
    needs: build
    env:
      IMAGE_NAME: zerojae175/easy-schedule
      DB_URL_DEV: ${{ secrets.DB_URL_DEVELOP }}
    steps:
      - name: Deploy to AWS EC2 (develop)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            TAG="dev_${{ github.sha }}"
            DB_URL="${{ env.DB_URL_DEV }}"

            echo "Pulling image: ${{ env.IMAGE_NAME }}:$TAG"
            docker pull ${{ env.IMAGE_NAME }}:$TAG

            echo "Stopping and removing container: easyshift_dev"
            docker stop easyshift_dev || true
            docker rm easyshift_dev || true

            echo "Starting new container..."
            docker run -d --restart unless-stopped \
              --name easyshift_dev \
              -p 127.0.0.1:8081:${{ secrets.SERVER_PORT }} \
              --add-host=host.docker.internal:host-gateway \
              -e SERVER_PORT="${{ secrets.SERVER_PORT }}" \
              -e DB_URL="$DB_URL" \
              -e DB_DRIVER="${{ secrets.DB_DRIVER }}" \
              -e DB_DIALECT="${{ secrets.DB_DIALECT }}" \
              -e DB_USERNAME="${{ secrets.DB_USERNAME }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
              ${{ env.IMAGE_NAME }}:$TAG

            echo "Deployment to AWS EC2 (develop) completed!"
